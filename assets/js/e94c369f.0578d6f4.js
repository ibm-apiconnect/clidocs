"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[68876],{60985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var i=n(74848),o=n(28453);const s={},r="apic orgs",a={id:"v1005/apim/apic_orgs_list",title:"apic orgs:list",description:"List the Organization objects",source:"@site/docs/v1005/apim/apic_orgs_list.md",sourceDirName:"v1005/apim",slug:"/v1005/apim/apic_orgs_list",permalink:"/clidocs/docs/v1005/apim/apic_orgs_list",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/apim/apic_orgs_list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic orgs:get",permalink:"/clidocs/docs/v1005/apim/apic_orgs_get"},next:{title:"apic orgs:transfer-owner",permalink:"/clidocs/docs/v1005/apim/apic_orgs_transfer-owner"}},c={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"apic-orgs",children:["apic orgs",":list"]})}),"\n",(0,i.jsx)(t.p,{children:"List the Organization objects"}),"\n",(0,i.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(t.p,{children:"List the Organization objects"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apic orgs:list [flags]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --expand string     List of transient field to expand\n      --fields string     List of field names to return\n      --format string     Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help              Help for orgs:list\n      --limit int32       Maximum number of items to return\n      --my                my\n      --offset int32      Offset item number from list to begin return\n      --org_type string   Type of orgs to return\n      --output string     Write file(s) to directory, instead of STDOUT (default "-")\n  -s, --server string     management server endpoint (required)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);