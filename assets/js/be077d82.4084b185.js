"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[40040],{4685:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=n(74848),o=n(28453);const s={},r="apic content",c={id:"v1005/portaladmin/apic_content_list",title:"apic content:list",description:"Lists all of the entities in your site for the given entity type and bundle.",source:"@site/docs/v1005/portaladmin/apic_content_list.md",sourceDirName:"v1005/portaladmin",slug:"/v1005/portaladmin/apic_content_list",permalink:"/clidocs/docs/v1005/portaladmin/apic_content_list",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/portaladmin/apic_content_list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic content:list-types",permalink:"/clidocs/docs/v1005/portaladmin/apic_content_list-types"},next:{title:"apic custom-module",permalink:"/clidocs/docs/v1005/portaladmin/apic_custom-module"}},a={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"apic-content",children:["apic content",":list"]}),"\n",(0,i.jsx)(e.p,{children:"Lists all of the entities in your site for the given entity type and bundle."}),"\n",(0,i.jsx)(e.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(e.p,{children:"Lists all of the entities in your site for the given entity type and bundle."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"apic content:list --mode portaladmin [flags]\n"})}),"\n",(0,i.jsx)(e.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'      --bundle string        The Bundle type for a given Entity type. E.g. "page" for the "node" Entity type.\n  -c, --catalog string       Name or ID of the Catalog that the site belongs to. (required)\n      --entity_type string   Type of entity you want to perform this operation on. To find out entity/content types see the content list-types route. (required)\n      --format string        Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                 Help for content:list\n  -o, --org string           Name or ID of the organization that the catalog belongs to. (required)\n  -s, --server string        management server endpoint (required)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>c});var i=n(96540);const o={},s=i.createContext(o);function r(t){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),i.createElement(s.Provider,{value:e},t.children)}}}]);