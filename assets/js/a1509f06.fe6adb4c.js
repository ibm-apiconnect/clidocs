"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[556641],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(296540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},430103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"v1005/apim/apic_subscriber-events_get","title":"apic subscriber-events:get","description":"Subscriber Events get operations","source":"@site/docs/v1005/apim/apic_subscriber-events_get.md","sourceDirName":"v1005/apim","slug":"/v1005/apim/apic_subscriber-events_get","permalink":"/clidocs/docs/v1005/apim/apic_subscriber-events_get","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/apim/apic_subscriber-events_get.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"apic subscriber-events","permalink":"/clidocs/docs/v1005/apim/apic_subscriber-events"},"next":{"title":"apic subscriber-events:list","permalink":"/clidocs/docs/v1005/apim/apic_subscriber-events_list"}}');var i=n(474848),r=n(28453);const o={},c="apic subscriber-events",a={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"apic-subscriber-events",children:["apic subscriber-events",":get"]})}),"\n",(0,i.jsx)(t.p,{children:"Subscriber Events get operations"}),"\n",(0,i.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(t.p,{children:"Subscriber Events get operations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apic subscriber-events:get [flags]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"  -c, --catalog string   Catalog name or id (required)\n      --fields string    List of field names to return\n      --format string    Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help             Help for subscriber-events:get\n  -o, --org string       Organization name or id (required)\n      --output string    Write file(s) to directory, use - for STDOUT. (default: cwd)\n      --scope string     scope\n  -s, --server string    management server endpoint (required)\n      --webhook string   Webhook name or id (required)\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);