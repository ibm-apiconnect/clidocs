"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[15417],{97201:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=e(74848),o=e(28453);const a={},s="apic notification-languages",c={id:"v1008/apim/apic_notification-languages",title:"apic notification-languages",description:"Notification Languages operations",source:"@site/docs/v1008/apim/apic_notification-languages.md",sourceDirName:"v1008/apim",slug:"/v1008/apim/apic_notification-languages",permalink:"/clidocs/docs/v1008/apim/apic_notification-languages",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/apim/apic_notification-languages.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic monitor",permalink:"/clidocs/docs/v1008/apim/apic_monitor"},next:{title:"apic notification-languages:get",permalink:"/clidocs/docs/v1008/apim/apic_notification-languages_get"}},r={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function p(n){const i={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"apic-notification-languages",children:"apic notification-languages"}),"\n",(0,t.jsx)(i.p,{children:"Notification Languages operations"}),"\n",(0,t.jsx)(i.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,t.jsx)(i.p,{children:"Notification Languages operations"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"apic notification-languages [flags]\n"})}),"\n",(0,t.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'  -c, --catalog string                 Catalog name or id (required)\n      --format string                  Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                           Help for notification-languages\n      --notification-template string   Notification Template name or id (required)\n  -o, --org string                     Organization name or id (required)\n      --output string                  Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string                   scope\n  -s, --server string                  management server endpoint (required)\n      --space string                   Space name or id (required)\n      --subcollection string           subcollection\n'})}),"\n",(0,t.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(n={}){const{wrapper:i}={...(0,o.R)(),...n.components};return i?(0,t.jsx)(i,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},28453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>c});var t=e(96540);const o={},a=t.createContext(o);function s(n){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function c(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(a.Provider,{value:i},n.children)}}}]);