"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[668197],{28453:(e,s,t)=>{t.d(s,{R:()=>n,x:()=>i});var o=t(296540);const r={},a=o.createContext(r);function n(e){const s=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),o.createElement(a.Provider,{value:s},e.children)}},269713:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"v1009/discovery/data-sources/apic_data-sources_get","title":"apic data-sources:get","description":"Get the Data Source object by name or id","source":"@site/docs/v1009/discovery/data-sources/apic_data-sources_get.md","sourceDirName":"v1009/discovery/data-sources","slug":"/v1009/discovery/data-sources/apic_data-sources_get","permalink":"/clidocs/docs/v1009/discovery/data-sources/apic_data-sources_get","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1009/discovery/data-sources/apic_data-sources_get.md","tags":[{"inline":true,"label":"group: data-sources","permalink":"/clidocs/docs/tags/group-data-sources"}],"version":"current","frontMatter":{"tags":["group: data-sources"]},"sidebar":"tutorialSidebar","previous":{"title":"apic data-sources:delete","permalink":"/clidocs/docs/v1009/discovery/data-sources/apic_data-sources_delete"},"next":{"title":"apic data-sources:list","permalink":"/clidocs/docs/v1009/discovery/data-sources/apic_data-sources_list"}}');var r=t(474848),a=t(28453);const n={tags:["group: data-sources"]},i="apic data-sources",c={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsxs)(s.h1,{id:"apic-data-sources",children:["apic data-sources",":get"]})}),"\n",(0,r.jsx)(s.p,{children:"Get the Data Source object by name or id"}),"\n",(0,r.jsx)(s.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(s.p,{children:"Get the Data Source object by name or id"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"apic data-sources:get --mode discovery [flags]\n"})}),"\n",(0,r.jsx)(s.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"apic data-sources:get --mode discovery [flags] DATA_SOURCE\n"})}),"\n",(0,r.jsx)(s.h2,{id:"options",children:"Options"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"      --fields string   List of field names to return\n      --format string   Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -o, --org string      Organization name or id (required)\n      --output string   Write file(s) to directory, use - for STDOUT. (default: cwd)\n  -s, --server string   management server endpoint (required)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);