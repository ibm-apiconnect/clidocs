"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[878718],{28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(296540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}},674158:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"v10010/engagement/tasks/apic_tasks_orgList","title":"apic tasks:orgList","description":"List tasks for an engagement rule at provider organization scope","source":"@site/docs/v10010/engagement/tasks/apic_tasks_orgList.md","sourceDirName":"v10010/engagement/tasks","slug":"/v10010/engagement/tasks/apic_tasks_orgList","permalink":"/clidocs/docs/v10010/engagement/tasks/apic_tasks_orgList","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v10010/engagement/tasks/apic_tasks_orgList.md","tags":[{"inline":true,"label":"group: tasks","permalink":"/clidocs/docs/tags/group-tasks"},{"inline":true,"label":"scope: org","permalink":"/clidocs/docs/tags/scope-org"}],"version":"current","frontMatter":{"tags":["group: tasks","scope: org"]},"sidebar":"tutorialSidebar","previous":{"title":"apic tasks:orgGet","permalink":"/clidocs/docs/v10010/engagement/tasks/apic_tasks_orgGet"},"next":{"title":"apic test","permalink":"/clidocs/docs/v10010/engagement/test/apic_test"}}');var i=s(474848),r=s(28453);const a={tags:["group: tasks","scope: org"]},o="apic tasks",c={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"apic-tasks",children:["apic tasks",":orgList"]})}),"\n",(0,i.jsx)(t.p,{children:"List tasks for an engagement rule at provider organization scope"}),"\n",(0,i.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(t.p,{children:"Return a result set of tasks."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apic tasks:orgList --mode engagement [flags]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apic tasks:orgList --mode engagement [flags] ID\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --accept-language string     Natural language and locale that the client prefers.\n      --analytics-service string   Analytics service name or ID. (required)\n      --end string                 If set, only return items with a datetime equal or older than this. The date-time value should be in ISO format. For example, 2021-07-21T00:00:000Z.\n                                   \n      --format string              Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --limit string               If set, the number of items to return when requesting a list. Maximum: 500\n      --offset string              If set, the offset to be applied when requesting a list. e.g. return events starting from the 100th result\n  -o, --org string                 Provider organization name or ID. (required)\n      --output string              Write file(s) to directory, instead of STDOUT (default "-")\n      --search string              Search for an item by name or description.\n  -s, --server string              management server endpoint (required)\n      --severity string            Rule severity.\n      --start string               If set, only return items with a datetime equal or newer than this. The date-time value should be in ISO format. For example, 2021-07-21T00:00:000Z.\n                                   \n      --status string              Task status.\n'})}),"\n",(0,i.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);