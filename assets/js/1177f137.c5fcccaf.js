"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[56182],{28453:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>d});var o=s(96540);const t={},n=o.createContext(t);function r(e){const i=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(n.Provider,{value:i},e.children)}},55625:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"v1008/discovery/discovered-apis/apic_discovered-apis_list-all","title":"apic discovered-apis:list-all","description":"List all Discovered API objects in all collections","source":"@site/docs/v1008/discovery/discovered-apis/apic_discovered-apis_list-all.md","sourceDirName":"v1008/discovery/discovered-apis","slug":"/v1008/discovery/discovered-apis/apic_discovered-apis_list-all","permalink":"/clidocs/docs/v1008/discovery/discovered-apis/apic_discovered-apis_list-all","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/discovery/discovered-apis/apic_discovered-apis_list-all.md","tags":[{"inline":true,"label":"group: discovered-apis","permalink":"/clidocs/docs/tags/group-discovered-apis"}],"version":"current","frontMatter":{"tags":["group: discovered-apis"]},"sidebar":"tutorialSidebar","previous":{"title":"apic discovered-apis:get","permalink":"/clidocs/docs/v1008/discovery/discovered-apis/apic_discovered-apis_get"},"next":{"title":"apic discovered-apis:list","permalink":"/clidocs/docs/v1008/discovery/discovered-apis/apic_discovered-apis_list"}}');var t=s(74848),n=s(28453);const r={tags:["group: discovered-apis"]},d="apic discovered-apis",c={},a=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsxs)(i.h1,{id:"apic-discovered-apis",children:["apic discovered-apis",":list-all"]})}),"\n",(0,t.jsx)(i.p,{children:"List all Discovered API objects in all collections"}),"\n",(0,t.jsx)(i.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,t.jsx)(i.p,{children:"List all Discovered API objects in all collections"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"apic discovered-apis:list-all --mode discovery [flags]\n"})}),"\n",(0,t.jsx)(i.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"\n      apic discovered-apis:list-all --mode discovery [flags]\n\n"})}),"\n",(0,t.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'      --api_ids string                  Ids of Discovered APIs selected for bulk download\n      --document_specification string   Optional document specification (type) to use to filter Discovered API lists\n      --fields string                   List of field names to return\n      --format string                   Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --limit int32                     Maximum number of items to return\n      --offset int32                    Offset item number from list to begin return\n  -o, --org string                      Organization name or id (required)\n      --output string                   Write file(s) to directory, instead of STDOUT (default "-")\n      --search_filter string            Optional search of Discovered APIs that contain provided values of their properties\n  -s, --server string                   management server endpoint (required)\n      --show_hidden                     Include results of hidden APIs or only return APIs that are not hidden\n      --source string                   Optional source to use to filter Discovered API lists\n      --state string                    Optional state to use to filter Discovered API lists\n'})}),"\n",(0,t.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);