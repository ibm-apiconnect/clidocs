"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[822827],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var t=s(296540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},169244:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"v10010/governance/scans/apic_scans","title":"apic scans","description":"Scans operations","source":"@site/docs/v10010/governance/scans/apic_scans.md","sourceDirName":"v10010/governance/scans","slug":"/v10010/governance/scans/apic_scans","permalink":"/clidocs/docs/v10010/governance/scans/apic_scans","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v10010/governance/scans/apic_scans.md","tags":[{"inline":true,"label":"group: scans","permalink":"/clidocs/docs/tags/group-scans"}],"version":"current","frontMatter":{"tags":["group: scans"]},"sidebar":"tutorialSidebar","previous":{"title":"apic scan-reports:update","permalink":"/clidocs/docs/v10010/governance/scan-reports/apic_scan-reports_update"},"next":{"title":"apic scans:clear","permalink":"/clidocs/docs/v10010/governance/scans/apic_scans_clear"}}');var o=s(474848),a=s(28453);const i={tags:["group: scans"]},r="apic scans",c={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"apic-scans",children:"apic scans"})}),"\n",(0,o.jsx)(n.p,{children:"Scans operations"}),"\n",(0,o.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(n.p,{children:"Scans operations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"apic scans --mode governance [flags]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'  -c, --catalog string       Catalog name or id (required)\n      --collections string   Specify an optional comma-separated list of Catalog or Space IDs or Names to filter Scans list.\n      --fields string        List of field names to return\n      --format string        Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                 Help for scans\n      --limit int32          Maximum number of items to return\n      --offset int32         Offset item number from list to begin return\n  -o, --org string           Organization name or id (required)\n      --output string        Write file(s) to directory, instead of STDOUT (default "-")\n      --scan_type string     Optional type for Scan\n      --scope string         scope\n  -s, --server string        management server endpoint (required)\n      --space string         Space name or id (required)\n      --status string        Specify an optional comma-separated list of statuses for Scans to filter Scans list.\n      --type string          Specify a type for Scans (e.g. catalog/space) to filter Scans list.\n'})}),"\n",(0,o.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);