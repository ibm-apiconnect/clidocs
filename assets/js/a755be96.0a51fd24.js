"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[18471],{28453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>p});var s=o(96540);const n={},i=s.createContext(n);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(i.Provider,{value:t},e.children)}},81631:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"v1009/apim/log-spec/apic_log-spec_get","title":"apic log-spec:get","description":"Get the Log Spec object","source":"@site/docs/v1009/apim/log-spec/apic_log-spec_get.md","sourceDirName":"v1009/apim/log-spec","slug":"/v1009/apim/log-spec/apic_log-spec_get","permalink":"/clidocs/docs/v1009/apim/log-spec/apic_log-spec_get","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1009/apim/log-spec/apic_log-spec_get.md","tags":[{"inline":true,"label":"group: log-spec","permalink":"/clidocs/docs/tags/group-log-spec"}],"version":"current","frontMatter":{"tags":["group: log-spec"]},"sidebar":"tutorialSidebar","previous":{"title":"apic log-spec","permalink":"/clidocs/docs/v1009/apim/log-spec/apic_log-spec"},"next":{"title":"apic log-spec:update","permalink":"/clidocs/docs/v1009/apim/log-spec/apic_log-spec_update"}}');var n=o(74848),i=o(28453);const c={tags:["group: log-spec"]},p="apic log-spec",l={},r=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsxs)(t.h1,{id:"apic-log-spec",children:["apic log-spec",":get"]})}),"\n",(0,n.jsx)(t.p,{children:"Get the Log Spec object"}),"\n",(0,n.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsx)(t.p,{children:"Get the Log Spec object"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic log-spec:get [flags]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic log-spec:get [flags]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"      --fields string   List of field names to return\n      --format string   Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --output string   Write file(s) to directory, use - for STDOUT. (default: cwd)\n  -s, --server string   management server endpoint (required)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);