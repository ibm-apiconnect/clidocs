"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[309128],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(296540);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}},156202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"v1005/analytics/apic_clustermgmt_catAllocation","title":"apic clustermgmt:catAllocation","description":"Snapshot of the number of shards allocated to each data node and their disk space.","source":"@site/docs/v1005/analytics/apic_clustermgmt_catAllocation.md","sourceDirName":"v1005/analytics","slug":"/v1005/analytics/apic_clustermgmt_catAllocation","permalink":"/clidocs/docs/v1005/analytics/apic_clustermgmt_catAllocation","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/analytics/apic_clustermgmt_catAllocation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"apic clustermgmt:catAliases","permalink":"/clidocs/docs/v1005/analytics/apic_clustermgmt_catAliases"},"next":{"title":"apic clustermgmt:catIndices","permalink":"/clidocs/docs/v1005/analytics/apic_clustermgmt_catIndices"}}');var a=n(474848),o=n(28453);const i={},r="apic clustermgmt",c={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsxs)(t.h1,{id:"apic-clustermgmt",children:["apic clustermgmt",":catAllocation"]})}),"\n",(0,a.jsx)(t.p,{children:"Snapshot of the number of shards allocated to each data node and their disk space."}),"\n",(0,a.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,a.jsx)(t.p,{children:"Provides a snapshot of the number of shards allocated to each data node and their disk space."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"apic clustermgmt:catAllocation --mode analytics [flags]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'      --accept-language string     Natural language and locale that the client prefers.\n      --analytics-service string   Analytics service name or ID. (required)\n      --bytes string               Unit used to display byte values.\n      --format string              Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --h string                   Comma-separated list of column names to display.\n      --help                       If true, the response includes help information.\n      --local string               Whether to get information from the local node.\n      --master_timeout string      Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.\n      --output string              Write file(s) to directory, instead of STDOUT (default "-")\n      --pretty                     Prettify response\n      --return_format string       Short version of the HTTP accept header. Valid values include JSON, YAML, etc.\n      --s string                   Comma-separated list of column names or column aliases used to sort the response.\n  -s, --server string              management server endpoint (required)\n      --v_columns                  If true, the response includes column headings.\n'})}),"\n",(0,a.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);