"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[24788],{73709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var s=t(74848),i=t(28453);const o={},r="apic scans",c={id:"v1008/governance/apic_scans",title:"apic scans",description:"Scans operations",source:"@site/docs/v1008/governance/apic_scans.md",sourceDirName:"v1008/governance",slug:"/v1008/governance/apic_scans",permalink:"/ibm-apiconnect/clidocs/docs/v1008/governance/apic_scans",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/governance/apic_scans.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic scan-reports:update",permalink:"/ibm-apiconnect/clidocs/docs/v1008/governance/apic_scan-reports_update"},next:{title:"apic scans:clear",permalink:"/ibm-apiconnect/clidocs/docs/v1008/governance/apic_scans_clear"}},a={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"apic-scans",children:"apic scans"}),"\n",(0,s.jsx)(n.p,{children:"Scans operations"}),"\n",(0,s.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,s.jsx)(n.p,{children:"Scans operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"apic scans --mode governance [flags]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'  -c, --catalog string       Catalog name or id (required)\n      --collections string   Specify an optional comma-separated list of Catalog or Space IDs or Names to filter Scans list.\n      --fields string        List of field names to return\n      --format string        Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                 Help for scans\n      --limit int32          Maximum number of items to return\n      --offset int32         Offset item number from list to begin return\n  -o, --org string           Organization name or id (required)\n      --output string        Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string         scope\n  -s, --server string        management server endpoint (required)\n      --space string         Space name or id (required)\n      --status string        Specify an optional comma-separated list of statuses for Scans to filter Scans list.\n      --type string          Specify a type for Scans (e.g. catalog/space) to filter Scans list.\n'})}),"\n",(0,s.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);