"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[7082],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},78042:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"v1009/governance/scan-reports/apic_scan-reports","title":"apic scan-reports","description":"Scan Reports operations","source":"@site/docs/v1009/governance/scan-reports/apic_scan-reports.md","sourceDirName":"v1009/governance/scan-reports","slug":"/v1009/governance/scan-reports/apic_scan-reports","permalink":"/clidocs/docs/v1009/governance/scan-reports/apic_scan-reports","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1009/governance/scan-reports/apic_scan-reports.md","tags":[{"inline":true,"label":"group: scan-reports","permalink":"/clidocs/docs/tags/group-scan-reports"}],"version":"current","frontMatter":{"tags":["group: scan-reports"]},"sidebar":"tutorialSidebar","previous":{"title":"apic rulesets:update","permalink":"/clidocs/docs/v1009/governance/rulesets/apic_rulesets_update"},"next":{"title":"apic scan-reports:clear","permalink":"/clidocs/docs/v1009/governance/scan-reports/apic_scan-reports_clear"}}');var s=r(74848),o=r(28453);const i={tags:["group: scan-reports"]},a="apic scan-reports",c={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"apic-scan-reports",children:"apic scan-reports"})}),"\n",(0,s.jsx)(n.p,{children:"Scan Reports operations"}),"\n",(0,s.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,s.jsx)(n.p,{children:"Scan Reports operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"apic scan-reports --mode governance [flags]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'  -c, --catalog string   Catalog name or id (required)\n      --fields string    List of field names to return\n      --format string    Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help             Help for scan-reports\n      --limit int32      Maximum number of items to return\n      --offset int32     Offset item number from list to begin return\n  -o, --org string       Organization name or id (required)\n      --output string    Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string     scope\n  -s, --server string    management server endpoint (required)\n      --space string     Space name or id (required)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);