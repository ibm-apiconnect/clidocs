"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[70186],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var o=i(96540);const n={},s=o.createContext(n);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},30394:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"v1009/apim/jobs/apic_jobs_retry","title":"apic jobs:retry","description":"Re-attempt blocked or failed job","source":"@site/docs/v1009/apim/jobs/apic_jobs_retry.md","sourceDirName":"v1009/apim/jobs","slug":"/v1009/apim/jobs/apic_jobs_retry","permalink":"/clidocs/docs/v1009/apim/jobs/apic_jobs_retry","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1009/apim/jobs/apic_jobs_retry.md","tags":[{"inline":true,"label":"group: jobs","permalink":"/clidocs/docs/tags/group-jobs"}],"version":"current","frontMatter":{"tags":["group: jobs"]},"sidebar":"tutorialSidebar","previous":{"title":"apic jobs:list","permalink":"/clidocs/docs/v1009/apim/jobs/apic_jobs_list"},"next":{"title":"apic jwk-sets","permalink":"/clidocs/docs/v1009/apim/jwk-sets/apic_jwk-sets"}}');var n=i(74848),s=i(28453);const r={tags:["group: jobs"]},a="apic jobs",c={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsxs)(t.h1,{id:"apic-jobs",children:["apic jobs",":retry"]})}),"\n",(0,n.jsx)(t.p,{children:"Re-attempt blocked or failed job"}),"\n",(0,n.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsx)(t.p,{children:"Re-attempt blocked or failed job"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic jobs:retry [flags]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic jobs:retry [flags] JOB\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --billing string   Billing name or id (required)\n      --confirm string   Confirmation for critical updates (required)\n      --format string    Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -o, --org string       Organization name or id (required)\n      --output string    Write file(s) to directory, instead of STDOUT (default "-")\n  -s, --server string    management server endpoint (required)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);