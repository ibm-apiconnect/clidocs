"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[202320],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var i=n(296540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},975498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"v10010/apim/entries/apic_entries_get","title":"apic entries:get","description":"Entries get operations","source":"@site/docs/v10010/apim/entries/apic_entries_get.md","sourceDirName":"v10010/apim/entries","slug":"/v10010/apim/entries/apic_entries_get","permalink":"/clidocs/docs/v10010/apim/entries/apic_entries_get","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v10010/apim/entries/apic_entries_get.md","tags":[{"inline":true,"label":"group: entries","permalink":"/clidocs/docs/tags/group-entries"},{"inline":true,"label":"scope: truststore","permalink":"/clidocs/docs/tags/scope-truststore"}],"version":"current","frontMatter":{"tags":["group: entries","scope: truststore"]},"sidebar":"tutorialSidebar","previous":{"title":"apic entries:delete","permalink":"/clidocs/docs/v10010/apim/entries/apic_entries_delete"},"next":{"title":"apic entries:list","permalink":"/clidocs/docs/v10010/apim/entries/apic_entries_list"}}');var s=n(474848),r=n(28453);const o={tags:["group: entries","scope: truststore"]},c="apic entries",a={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsxs)(t.h1,{id:"apic-entries",children:["apic entries",":get"]})}),"\n",(0,s.jsx)(t.p,{children:"Entries get operations"}),"\n",(0,s.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,s.jsx)(t.p,{children:"Entries get operations"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"apic entries:get [flags]\n"})}),"\n",(0,s.jsx)(t.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"apic entries:get [flags] --scope truststore ENTRY\n"})}),"\n",(0,s.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"      --fields string       List of field names to return\n      --format string       Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                Help for entries:get\n  -o, --org string          Organization name or id (required)\n      --output string       Write file(s) to directory, use - for STDOUT. (default: cwd)\n      --scope string        scope\n  -s, --server string       management server endpoint (required)\n      --truststore string   Truststore name or id (required)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);