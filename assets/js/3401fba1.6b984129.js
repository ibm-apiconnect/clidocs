"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[199465],{28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>r});var t=n(296540);const o={},a=t.createContext(o);function s(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:i},e.children)}},301626:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"v1008/portaladmin/api/apic_api_set-icon","title":"apic api:set-icon","description":"Set an icon image for the given api.","source":"@site/docs/v1008/portaladmin/api/apic_api_set-icon.md","sourceDirName":"v1008/portaladmin/api","slug":"/v1008/portaladmin/api/apic_api_set-icon","permalink":"/clidocs/docs/v1008/portaladmin/api/apic_api_set-icon","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/portaladmin/api/apic_api_set-icon.md","tags":[{"inline":true,"label":"group: api","permalink":"/clidocs/docs/tags/group-api"}],"version":"current","frontMatter":{"tags":["group: api"]},"sidebar":"tutorialSidebar","previous":{"title":"apic api:list","permalink":"/clidocs/docs/v1008/portaladmin/api/apic_api_list"},"next":{"title":"apic","permalink":"/clidocs/docs/v1008/portaladmin/apic/"}}');var o=n(474848),a=n(28453);const s={tags:["group: api"]},r="apic api",p={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsxs)(i.h1,{id:"apic-api",children:["apic api",":set-icon"]})}),"\n",(0,o.jsx)(i.p,{children:"Set an icon image for the given api."}),"\n",(0,o.jsx)(i.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsxs)(i.p,{children:["Set an icon image for a api within the developer portal of the provided org and catalog. The existing icon will be overwritten. The id or name",":version"," of a specific api needs to be provided. e.g. 'id-of-api-called-example-3' or 'example:3.0.0'."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"apic api:set-icon --mode portaladmin [flags]\n"})}),"\n",(0,o.jsx)(i.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"apic api:set-icon --mode portaladmin [flags] API API_FILE\n"})}),"\n",(0,o.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"  -c, --catalog string            Name or ID of the Catalog that the site belongs to. (required)\n      --format string             Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --icon_description string   A description of the icon to be displayed to users. Used as alt text for the image. (required)\n  -o, --org string                Name or ID of the organization that the catalog belongs to. (required)\n  -s, --server string             management server endpoint (required)\n"})}),"\n",(0,o.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);