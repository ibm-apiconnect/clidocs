"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[97416],{86203:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var i=t(74848),s=t(28453);const a={},o="apic gateway-extensions",r={id:"v1008/apim/apic_gateway-extensions_update",title:"apic gateway-extensions:update",description:"Gateway Extensions update operations",source:"@site/docs/v1008/apim/apic_gateway-extensions_update.md",sourceDirName:"v1008/apim",slug:"/v1008/apim/apic_gateway-extensions_update",permalink:"/clidocs/docs/v1008/apim/apic_gateway-extensions_update",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/apim/apic_gateway-extensions_update.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic gateway-extensions:implementation",permalink:"/clidocs/docs/v1008/apim/apic_gateway-extensions_implementation"},next:{title:"apic gateway-services",permalink:"/clidocs/docs/v1008/apim/apic_gateway-services"}},c={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"apic-gateway-extensions",children:["apic gateway-extensions",":update"]})}),"\n",(0,i.jsx)(n.p,{children:"Gateway Extensions update operations"}),"\n",(0,i.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(n.p,{children:"Gateway Extensions update operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"apic gateway-extensions:update [flags]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"      apic gateway-extensions:update [flags] --scope org GATEWAY_EXTENSION_FILE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'      --availability-zone string   Availability Zone name or id (required)\n      --format string              Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --gateway-service string     Gateway Service name or id (required)\n  -h, --help                       Help for gateway-extensions:update\n  -o, --org string                 Organization name or id (required)\n      --output string              Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string               scope\n  -s, --server string              management server endpoint (required)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);