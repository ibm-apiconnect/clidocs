"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[83976],{79154:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=o(74848),a=o(28453);const i={sidebar_position:1},s="Introduction",r={id:"intro",title:"Introduction",description:"How to use the API Connect command line interface.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/clidocs/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/clidocs/docs/install"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Toolkit modes",id:"toolkit-modes",level:2},{value:"apim",id:"apim",level:3},{value:"analytics",id:"analytics",level:3},{value:"portaladmin",id:"portaladmin",level:3},{value:"consumer",id:"consumer",level:3},{value:"Scripting",id:"scripting",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"How to use the API Connect command line interface."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"How to install the API Connect toolkit."}),"\n",(0,t.jsxs)(n.p,{children:["The toolkit can be downloaded directly from IBM Fix Central (be careful to get the same version as your API Connect deployment), or it can be downloaded directly from your API Manager UI. Both methods are covered here: ",(0,t.jsx)(n.a,{href:"./install",children:"Installing"})]}),"\n",(0,t.jsx)(n.h2,{id:"toolkit-modes",children:"Toolkit modes"}),"\n",(0,t.jsx)(n.p,{children:"The API Connect toolkit CLI runs commands on either the provider organization or on the consumer organization. When you run the command, you use the different mode options to identify the instance on which you want to run the command. The following list provides a summary of the modes that are available:"}),"\n",(0,t.jsx)(n.h3,{id:"apim",children:"apim"}),"\n",(0,t.jsx)(n.p,{children:"This mode applies to the administrative instances of the CLI. When you run commands in this mode, it uses the overall API Manager as its scope. This mode is the default mode.\nAn example of running a command in the apim mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic extensions:list-all --mode apim --scope catalog --server server1 --catalog catalog1 --org myOrg --configured-gateway-service service1 \n"})}),"\n",(0,t.jsx)(n.h3,{id:"analytics",children:"analytics"}),"\n",(0,t.jsx)(n.p,{children:"This mode applies to the analytics instances of the CLI. This mode supports commands that you can use to access data from the analytics subsystem.\nAn example of running a command in the analytics mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic --mode analytics events:cloudCount --catalog catalog1 --org myOrg --server server1 --format json\n"})}),"\n",(0,t.jsx)(n.h3,{id:"portaladmin",children:"portaladmin"}),"\n",(0,t.jsx)(n.p,{children:"This mode applies to the developer portal instances of the CLI. This mode supports commands that you can use to replicate all or part of your Developer Portal environment.\nAn example of running a command in the portaladmin mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic --mode portaladmin custom-theme:create-export --catalog catalog1 --org myOrg --server server1 --format json\n"})}),"\n",(0,t.jsx)(n.h3,{id:"consumer",children:"consumer"}),"\n",(0,t.jsx)(n.p,{children:"This mode applies to the consumer instances of the CLI. This command uses the consumer organizations that you have permission to access as its scope. You must specify this mode or set it as the default value for the command to use it. This mode is for use by the consumer themselves and the authentication must be that of the API consumer.\nAn example of running a command in the consumer mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic catalogs:list --mode consumer --scope catalog --server server1 --catalog catalog1 --org myOrg\n"})}),"\n",(0,t.jsx)(n.p,{children:"To avoid having to supply the parameter on every consumer CLI command, you can set the mode configuration variable."}),"\n",(0,t.jsx)(n.h2,{id:"scripting",children:"Scripting"}),"\n",(0,t.jsx)(n.p,{children:"It's often helpful to automate a series of apic commands In a shell script. Since the apic tool first requires you to interactively accept the license, you must first use the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic --accept-license\n"})}),"\n",(0,t.jsx)(n.p,{children:"Once you do that, your scripts can run non-interactively.\nTo disable collection of usage analytics, enter this command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apic --live-help\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var t=o(96540);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);