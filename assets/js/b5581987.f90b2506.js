"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[55794],{28453:(e,i,o)=>{o.d(i,{R:()=>n,x:()=>d});var s=o(96540);const r={},t=s.createContext(r);function n(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),s.createElement(t.Provider,{value:i},e.children)}},94716:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>n,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"v1009/discovery/discovered-apis/apic_discovered-apis_copy-to-draft","title":"apic discovered-apis:copy-to-draft","description":"Copy a Discovered API to API Manager as a Draft API by name and version","source":"@site/docs/v1009/discovery/discovered-apis/apic_discovered-apis_copy-to-draft.md","sourceDirName":"v1009/discovery/discovered-apis","slug":"/v1009/discovery/discovered-apis/apic_discovered-apis_copy-to-draft","permalink":"/clidocs/docs/v1009/discovery/discovered-apis/apic_discovered-apis_copy-to-draft","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1009/discovery/discovered-apis/apic_discovered-apis_copy-to-draft.md","tags":[{"inline":true,"label":"group: discovered-apis","permalink":"/clidocs/docs/tags/group-discovered-apis"}],"version":"current","frontMatter":{"tags":["group: discovered-apis"]},"sidebar":"tutorialSidebar","previous":{"title":"apic discovered-apis:clear","permalink":"/clidocs/docs/v1009/discovery/discovered-apis/apic_discovered-apis_clear"},"next":{"title":"apic discovered-apis:create","permalink":"/clidocs/docs/v1009/discovery/discovered-apis/apic_discovered-apis_create"}}');var r=o(74848),t=o(28453);const n={tags:["group: discovered-apis"]},d="apic discovered-apis",a={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function p(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsxs)(i.h1,{id:"apic-discovered-apis",children:["apic discovered-apis",":copy-to-draft"]})}),"\n",(0,r.jsx)(i.p,{children:"Copy a Discovered API to API Manager as a Draft API by name and version"}),"\n",(0,r.jsx)(i.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(i.p,{children:"Copy a Discovered API to API Manager as a Draft API by name and version"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"apic discovered-apis:copy-to-draft --mode discovery [flags]\n"})}),"\n",(0,r.jsx)(i.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"apic discovered-apis:copy-to-draft --mode discovery [flags] --id ID\napic discovered-apis:copy-to-draft --mode discovery [flags] NAME:VERSION\n"})}),"\n",(0,r.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:'      --format string              Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -o, --org string                 Organization name or id (required)\n      --output string              Write file(s) to directory, instead of STDOUT (default "-")\n      --promotion_title string     Optional custom name to be used for promotion to Draft API\n      --promotion_version string   Optional custom version to be used for promotion to Draft API\n  -s, --server string              management server endpoint (required)\n'})}),"\n",(0,r.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);