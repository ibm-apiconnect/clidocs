"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[59708],{84507:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=t(74848),r=t(28453);const s={},a="apic primary-events",o={id:"v1008/apim/apic_primary-events_get",title:"apic primary-events:get",description:"Primary Events get operations",source:"@site/docs/v1008/apim/apic_primary-events_get.md",sourceDirName:"v1008/apim",slug:"/v1008/apim/apic_primary-events_get",permalink:"/clidocs/docs/v1008/apim/apic_primary-events_get",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/apim/apic_primary-events_get.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic primary-events",permalink:"/clidocs/docs/v1008/apim/apic_primary-events"},next:{title:"apic primary-events:list",permalink:"/clidocs/docs/v1008/apim/apic_primary-events_list"}},c={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.h1,{id:"apic-primary-events",children:["apic primary-events",":get"]}),"\n",(0,n.jsx)(i.p,{children:"Primary Events get operations"}),"\n",(0,n.jsx)(i.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsx)(i.p,{children:"Primary Events get operations"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"apic primary-events:get [flags]\n"})}),"\n",(0,n.jsx)(i.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"      apic primary-events:get [flags] --scope portal-service PRIMARY_EVENT\n      apic primary-events:get [flags] --scope gateway-service PRIMARY_EVENT\n      apic primary-events:get [flags] --scope configured-gateway-service PRIMARY_EVENT\n      apic primary-events:get [flags] --scope cloud PRIMARY_EVENT\n      apic primary-events:get [flags] --scope catalog PRIMARY_EVENT\n"})}),"\n",(0,n.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"      --availability-zone string            Availability Zone name or id (required)\n  -c, --catalog string                      Catalog name or id (required)\n      --configured-gateway-service string   Configured Gateway Service name or id (required)\n      --fields string                       List of field names to return\n      --format string                       Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n      --gateway-service string              Gateway Service name or id (required)\n  -h, --help                                Help for primary-events:get\n  -o, --org string                          Organization name or id (required)\n      --output string                       Write file(s) to directory, use - for STDOUT. (default: cwd)\n      --portal-service string               Portal Service name or id (required)\n      --scope string                        scope\n  -s, --server string                       management server endpoint (required)\n"})}),"\n",(0,n.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>o});var n=t(96540);const r={},s=n.createContext(r);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);