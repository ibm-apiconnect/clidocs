"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[32144],{53492:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=n(74848),i=n(28453);const r={},a="apic clustermgmt",c={id:"v1005/analytics/apic_clustermgmt_putSettings",title:"apic clustermgmt:putSettings",description:"Configures dynamic cluster settings.",source:"@site/docs/v1005/analytics/apic_clustermgmt_putSettings.md",sourceDirName:"v1005/analytics",slug:"/v1005/analytics/apic_clustermgmt_putSettings",permalink:"/ibm-apiconnect/clidocs/docs/v1005/analytics/apic_clustermgmt_putSettings",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/analytics/apic_clustermgmt_putSettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic clustermgmt:putAliasByIndexAlias",permalink:"/ibm-apiconnect/clidocs/docs/v1005/analytics/apic_clustermgmt_putAliasByIndexAlias"},next:{title:"apic clustermgmt:putStorageSettings",permalink:"/ibm-apiconnect/clidocs/docs/v1005/analytics/apic_clustermgmt_putStorageSettings"}},o={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function u(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"apic-clustermgmt",children:["apic clustermgmt",":putSettings"]}),"\n",(0,s.jsx)(e.p,{children:"Configures dynamic cluster settings."}),"\n",(0,s.jsx)(e.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,s.jsx)(e.p,{children:"You can configure and update dynamic settings on a running cluster using the cluster update settings API. Updates made using the cluster update settings API can be persistent, which apply across cluster restarts, or transient, which reset after a cluster restart. You can also reset transient or persistent settings by assigning them a null value using the API."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"apic clustermgmt:putSettings --mode analytics [flags]\n"})}),"\n",(0,s.jsx)(e.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'      --accept-language string     Natural language and locale that the client prefers.\n      --analytics-service string   Analytics service name or ID. (required)\n      --flat_settings              If true, returns settings in flat format.\n      --format string              Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                       Help for clustermgmt:putSettings\n      --include_defaults           If true, returns all default cluster settings. Defaults to false.\n      --master_timeout string      Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.\n      --output string              Write file(s) to directory, instead of STDOUT (default "-")\n      --pretty                     Prettify response\n  -s, --server string              management server endpoint (required)\n      --timeout string             Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.\n'})}),"\n",(0,s.jsx)(e.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(u,{...t})}):u(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function a(t){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),s.createElement(r.Provider,{value:e},t.children)}}}]);