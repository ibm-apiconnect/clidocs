"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[70488],{77049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var i=t(74848),o=t(28453);const r={},s="apic groups",p={id:"v1005/apim/apic_groups",title:"apic groups",description:"Groups operations",source:"@site/docs/v1005/apim/apic_groups.md",sourceDirName:"v1005/apim",slug:"/v1005/apim/apic_groups",permalink:"/clidocs/docs/v1005/apim/apic_groups",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/apim/apic_groups.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic global-policy-prehooks:update",permalink:"/clidocs/docs/v1005/apim/apic_global-policy-prehooks_update"},next:{title:"apic groups:clear",permalink:"/clidocs/docs/v1005/apim/apic_groups_clear"}},a={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"apic-groups",children:"apic groups"}),"\n",(0,i.jsx)(n.p,{children:"Groups operations"}),"\n",(0,i.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(n.p,{children:"Groups operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"apic groups [flags]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'  -c, --catalog string    Catalog name or id (required)\n      --fields string     List of field names to return\n      --format string     Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help              Help for groups\n      --limit int32       Maximum number of items to return\n      --offset int32      Offset item number from list to begin return\n  -o, --org string        Organization name or id (required)\n      --output string     Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string      scope\n  -s, --server string     management server endpoint (required)\n      --space string      Space name or id (required)\n      --space-initiated   space-initiated\n'})}),"\n",(0,i.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>p});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);