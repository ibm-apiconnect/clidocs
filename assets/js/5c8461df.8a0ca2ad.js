"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[643410],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var a=i(296540);const n={},s=a.createContext(n);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},228071:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"v1008/apim/draft-apis/apic_draft-apis_get","title":"apic draft-apis:get","description":"Get the Draft API object by name and version","source":"@site/docs/v1008/apim/draft-apis/apic_draft-apis_get.md","sourceDirName":"v1008/apim/draft-apis","slug":"/v1008/apim/draft-apis/apic_draft-apis_get","permalink":"/clidocs/docs/v1008/apim/draft-apis/apic_draft-apis_get","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1008/apim/draft-apis/apic_draft-apis_get.md","tags":[{"inline":true,"label":"group: draft-apis","permalink":"/clidocs/docs/tags/group-draft-apis"}],"version":"current","frontMatter":{"tags":["group: draft-apis"]},"sidebar":"tutorialSidebar","previous":{"title":"apic draft-apis:document","permalink":"/clidocs/docs/v1008/apim/draft-apis/apic_draft-apis_document"},"next":{"title":"apic draft-apis:list-all","permalink":"/clidocs/docs/v1008/apim/draft-apis/apic_draft-apis_list-all"}}');var n=i(474848),s=i(28453);const r={tags:["group: draft-apis"]},o="apic draft-apis",d={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Possible Usages",id:"possible-usages",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsxs)(t.h1,{id:"apic-draft-apis",children:["apic draft-apis",":get"]})}),"\n",(0,n.jsx)(t.p,{children:"Get the Draft API object by name and version"}),"\n",(0,n.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsx)(t.p,{children:"Get the Draft API object by name and version"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic draft-apis:get [flags]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"possible-usages",children:"Possible Usages"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic draft-apis:get [flags] --id ID\napic draft-apis:get [flags] NAME:VERSION\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --fields string   List of field names to return (default "add(wsdl,draft_api)")\n      --format string   Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -o, --org string      Organization name or id (required)\n      --output string   Write file(s) to directory, use - for STDOUT. (default: cwd)\n  -s, --server string   management server endpoint (required)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);