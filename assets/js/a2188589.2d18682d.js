"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[16405],{84313:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"v1005/portaladmin/apic_role_list","title":"apic role:list","description":"Display a list of all roles defined on the system. If a role name is provided as an argument, then all of the permissions of that role will be listed. If a permission name is provided as an option, then all of the roles that have been granted that permission will be listed.","source":"@site/docs/v1005/portaladmin/apic_role_list.md","sourceDirName":"v1005/portaladmin","slug":"/v1005/portaladmin/apic_role_list","permalink":"/clidocs/docs/v1005/portaladmin/apic_role_list","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/portaladmin/apic_role_list.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"apic role:get","permalink":"/clidocs/docs/v1005/portaladmin/apic_role_get"},"next":{"title":"apic role:remove-permission","permalink":"/clidocs/docs/v1005/portaladmin/apic_role_remove-permission"}}');var n=i(74848),s=i(28453);const r={},a="apic role",l={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsxs)(t.h1,{id:"apic-role",children:["apic role",":list"]})}),"\n",(0,n.jsx)(t.p,{children:"Display a list of all roles defined on the system. If a role name is provided as an argument, then all of the permissions of that role will be listed. If a permission name is provided as an option, then all of the roles that have been granted that permission will be listed."}),"\n",(0,n.jsx)(t.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,n.jsx)(t.p,{children:"Display a list of all roles defined on the system. If a role name is provided as an argument, then all of the permissions of that role will be listed. If a permission name is provided as an option, then all of the roles that have been granted that permission will be listed."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"apic role:list --mode portaladmin [flags]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  -c, --catalog string                Name or ID of the Catalog that the site belongs to. (required)\n      --filter_by_permission string   Limits the list of roles to only those that have been assigned the specified permission. May not be specified if a role argument is provided.\n      --format string                 Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                          Help for role:list\n  -o, --org string                    Name or ID of the organization that the catalog belongs to. (required)\n      --role string                   The name of the Drupal User Role.\n  -s, --server string                 management server endpoint (required)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var o=i(96540);const n={},s=o.createContext(n);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);