"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[15842],{69975:(i,n,e)=>{e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=e(74848),o=e(28453);const a={},s="apic notification-languages",c={id:"v1005/apim/apic_notification-languages_list",title:"apic notification-languages:list",description:"Notification Languages list operations",source:"@site/docs/v1005/apim/apic_notification-languages_list.md",sourceDirName:"v1005/apim",slug:"/v1005/apim/apic_notification-languages_list",permalink:"/ibm-apiconnect/clidocs/docs/v1005/apim/apic_notification-languages_list",draft:!1,unlisted:!1,editUrl:"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v1005/apim/apic_notification-languages_list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apic notification-languages:get",permalink:"/ibm-apiconnect/clidocs/docs/v1005/apim/apic_notification-languages_get"},next:{title:"apic notification-languages:update",permalink:"/ibm-apiconnect/clidocs/docs/v1005/apim/apic_notification-languages_update"}},r={},l=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function p(i){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"apic-notification-languages",children:["apic notification-languages",":list"]}),"\n",(0,t.jsx)(n.p,{children:"Notification Languages list operations"}),"\n",(0,t.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,t.jsx)(n.p,{children:"Notification Languages list operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"apic notification-languages:list [flags]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'  -c, --catalog string                 Catalog name or id (required)\n      --format string                  Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help                           Help for notification-languages:list\n      --notification-template string   Notification Template name or id (required)\n  -o, --org string                     Organization name or id (required)\n      --output string                  Write file(s) to directory, instead of STDOUT (default "-")\n      --scope string                   scope\n  -s, --server string                  management server endpoint (required)\n      --space string                   Space name or id (required)\n      --subcollection string           subcollection\n'})}),"\n",(0,t.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function d(i={}){const{wrapper:n}={...(0,o.R)(),...i.components};return n?(0,t.jsx)(n,{...i,children:(0,t.jsx)(p,{...i})}):p(i)}},28453:(i,n,e)=>{e.d(n,{R:()=>s,x:()=>c});var t=e(96540);const o={},a=t.createContext(o);function s(i){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof i?i(n):{...n,...i}}),[n,i])}function c(i){let n;return n=i.disableParentContext?"function"==typeof i.components?i.components(o):i.components||o:s(i.components),t.createElement(a.Provider,{value:n},i.children)}}}]);