"use strict";(self.webpackChunkclidocs=self.webpackChunkclidocs||[]).push([[757396],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var r=o(296540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},645424:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"v10010/consumer/orgs/apic_orgs","title":"apic orgs","description":"Orgs operations","source":"@site/docs/v10010/consumer/orgs/apic_orgs.md","sourceDirName":"v10010/consumer/orgs","slug":"/v10010/consumer/orgs/apic_orgs","permalink":"/clidocs/docs/v10010/consumer/orgs/apic_orgs","draft":false,"unlisted":false,"editUrl":"https://github.com/ibm-apiconnect/clidocs/tree/main/docs/v10010/consumer/orgs/apic_orgs.md","tags":[{"inline":true,"label":"group: orgs","permalink":"/clidocs/docs/tags/group-orgs"}],"version":"current","frontMatter":{"tags":["group: orgs"]},"sidebar":"tutorialSidebar","previous":{"title":"apic monitor","permalink":"/clidocs/docs/v10010/consumer/monitor/apic_monitor"},"next":{"title":"apic orgs:create","permalink":"/clidocs/docs/v10010/consumer/orgs/apic_orgs_create"}}');var t=o(474848),s=o(28453);const i={tags:["group: orgs"]},c="apic orgs",a={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"apic-orgs",children:"apic orgs"})}),"\n",(0,t.jsx)(n.p,{children:"Orgs operations"}),"\n",(0,t.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,t.jsx)(n.p,{children:"Orgs operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"apic orgs --mode consumer [flags]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'      --fields string   field name\n      --format string   Output format. One of [json yaml octet-stream go-template=... go-template-file=...], defaults to yaml.\n  -h, --help            Help for orgs\n      --limit int32     Maximum number of items to return\n      --my              my\n      --offset int32    Offset item number from list to begin return\n      --output string   Write file(s) to directory, instead of STDOUT (default "-")\n  -s, --server string   management server endpoint (required)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'      --accept-license        Accept the license for API Connect\n      --debug                 Enable debug output\n      --debug-output string   Write debug output to file\n      --lang string           Toolkit operation language\n      --live-help             Enable or disable tracking of limited usage information\n  -m, --mode string           Toolkit operation mode (default "apim")\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);